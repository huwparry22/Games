@page "/kingscup"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Shared.Games
@using BlazorSignalRApp.Shared.Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>KingsCup</h3>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

@if (!_playerAdded)
{
    <AddPlayer OnPlayerAdding="AddPlayer"></AddPlayer>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col"></div>
            <div class="col-auto text-right">
                <Players AllPlayers="_players" CurrentPlayer="@(_currentPlayer)"></Players>
            </div>
        </div>
        <div class="row">
            <div class="col">
                @if (_thisPlayer == _currentPlayer)
                {
                    <div @onclick="GetNextCard"><SingleCard></SingleCard></div>
                }
                else
                {
                    <SingleCard></SingleCard>
                }
            </div>
            <div class="col">
                @if (_currentCard != null)
                {
                    <SingleCard DisplayCard="_currentCard"></SingleCard>
                }
            </div>
        </div>
    </div>
}

@code {
    private string _thisPlayer;
    private bool _playerAdded = false;

    private string _errorMessage;
    private HubConnection _hubConnection;
    private Card _currentCard;
    private string _currentPlayer;
    private List<string> _players = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("kingscuphub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.Reconnecting += exception =>
        {
            return _hubConnection.SendAsync("GetCurrentGameState");
        };

        _hubConnection.On<string>("OnPlayerAdded", (playerName) =>
        {
            _playerAdded = true;
            _thisPlayer = playerName;

            StateHasChanged();
        });

        _hubConnection.On<KingsCupModel>("OnKingsCupUpdated", (model) =>
        {
            _errorMessage = model.ErrorMessage;
            _players = model.Players;
            _currentPlayer = model.CurrentPlayer;
            _currentCard = model.CurrentCard;

            StateHasChanged();
        });

        _hubConnection.On<string>("OnError", (errorMessage) =>
        {
            _errorMessage = errorMessage;

            StateHasChanged();
        });

        await _hubConnection.StartAsync().ConfigureAwait(false);
    }

    Task AddPlayer(string playerName) => _hubConnection.SendAsync("AddPlayer", playerName);

    Task GetNextCard() => _hubConnection.SendAsync("GetNextCard");

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync().ConfigureAwait(false);
    }
}
